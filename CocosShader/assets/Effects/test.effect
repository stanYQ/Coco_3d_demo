//定义部分  
//effect所具备的technique、pass结构以及外部变量和渲染状态。
//每一个 -name:对应一个 technique
//以看到，builtin-unlit定义了opaque、transparent、add、alpha-blend四个technique，
//每个technique只有一个pass。我们需要多次渲染同一个物体才能实现，这个时候就需要多pass

CCEffect %{
  techniques:
  - name: opaque
    passes:
    //入口函数 你可以给每个pass指定不同的vs和fs shader。
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      //面板可见常量  shader中定义好的uniform，如果要让面板可见，就需要在这个部分做引出。
      properties: &props
        mainTexture:    { value: grey }
        tilingOffset:   { value: [1, 1, 0, 0] }
        mainColor:      { value: [1, 1, 1, 1], editor: { type: color } }
        colorScale:     { value: [1, 1, 1], target: colorScaleAndCutoff.xyz }
        alphaThreshold: { value: 0.5, target: colorScaleAndCutoff.w, editor: { parent: USE_ALPHA_TEST } }
        color:          { target: mainColor, editor: { visible: false } } # backward compability
      migrations: &migs
        properties:
          mainColor:    { formerlySerializedAs: color }

  - name: transparent
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      //深入读写开关 实体对象，深度测试和深度写入都会开启，但像技能特效中的半透明效果，就只进行深度测试，而不进行深度写入
      depthStencilState: &d1
        depthTest: true
        depthWrite: false
      // Alpha混合控制
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
      migrations: *migs
    //add technique
  - name: add
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      //光栅化参数
      rasterizerState: &r1 { cullMode: none }
      depthStencilState: *d1
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one
          blendSrcAlpha: src_alpha
          blendDstAlpha: one
      properties: *props
      migrations: *migs
// alpha-blend
  - name: alpha-blend
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      rasterizerState: *r1
      depthStencilState: *d1
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
      migrations: *migs
}%

//顶点着色器部分
CCProgram unlit-vs %{
  precision highp float;
  #include <input>
  #include <cc-global>
  #include <cc-local-batch>
  #include <input>
  #include <cc-fog>

// USE_VERTEX_COLOR会出现在材质面板 
  #if USE_VERTEX_COLOR
    in lowp vec4 a_color;
    //输出顶点颜色
    out lowp vec4 v_color;
  #endif

  #if USE_TEXTURE
  //顶点UV
    out vec2 v_uv;
    uniform TexCoords {
      vec4 tilingOffset;
    };
  #endif
  
  //输出雾效因子
  out float factor_fog;
  vec4 vert () {
    vec4 position;
    CCVertInput(position);

    mat4 matWorld;
    CCGetWorldMatrix(matWorld);

    #if USE_TEXTURE
      v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;
    #endif

    #if USE_VERTEX_COLOR
      v_color = a_color;
    #endif
    factor_fog = CC_TRANSFER_FOG(matWorld * position);
    return cc_matProj * (cc_matView * matWorld) * position;
  }
}%

CCProgram unlit-fs %{
  precision highp float;
  #include <output>
  #include <cc-fog>

  #if USE_ALPHA_TEST
    #pragma define ALPHA_TEST_CHANNEL options([a, r, g, b])
  #endif

  #if USE_TEXTURE
    in vec2 v_uv;
    uniform sampler2D mainTexture;
  #endif

  uniform Constant {
    vec4 mainColor;
    vec4 colorScaleAndCutoff;
  };

  #if USE_VERTEX_COLOR
    in lowp vec4 v_color;
  #endif
  //就是vs的out即为fs的in
  in float factor_fog;

  vec4 frag () {
    vec4 o = mainColor;
    o.rgb *= colorScaleAndCutoff.xyz;

    #if USE_VERTEX_COLOR
      o *= v_color;
    #endif

    #if USE_TEXTURE
      o *= texture(mainTexture, v_uv);
    #endif

    #if USE_ALPHA_TEST
      if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;
    #endif
    o = CC_APPLY_FOG(o, factor_fog);
    return CCFragOutput(o);
  }
}%